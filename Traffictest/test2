entity traffic_light is
  port (
    clk : in std_logic;
    reset : in std_logic;
    direction : in std_logic_vector(1 downto 0);
    state : out std_logic_vector(1 downto 0);
    light : out std_logic_vector(1 downto 0)
  );
end traffic_light;

architecture rtl of traffic_light is
  signal counter : integer range 0 to 7;
  signal green : std_logic;
  signal yellow : std_logic;
  signal red : std_logic;
  buffer state : std_logic_vector(1 downto 0); -- Change to buffer mode

begin
  process (clk, reset)
  begin
    if reset = '1' then
      counter <= 0;
      state <= "00";
      green <= '0';
      yellow <= '0';
      red <= '1';
    else
      if rising_edge(clk) then
        if counter = 0 then
          case direction is
            when "00" =>
              state <= "01";
              green <= '1';
              yellow <= '0';
              red <= '0';
            when "01" =>
              state <= "10";
              green <= '1';
              yellow <= '0';
              red <= '0';
            when "10" =>
              state <= "11";
              green <= '0';
              yellow <= '1';
              red <= '0';
            when "11" =>
              state <= "00";
              green <= '0';
              yellow <= '0';
              red <= '1';
            others =>
              state <= "00";
              green <= '0';
              yellow <= '1';
              red <= '1';
          end case;
        else
          counter <= counter - 1;
          case state is
            when "00" =>
              green <= '0';
              yellow <= '1';
              red <= '1';
            when "01" =>
              green <= '1';
              yellow <= '0';
              red <= '0';
            when "10" =>
              green <= '1';
              yellow <= '0';
              red <= '0';
            when "11" =>
              green <= '0';
              yellow <= '1';
              red <= '0';
          end case;
        end if;
      end if;
    end if;
  end process;

  light <= std_logic_vector(to_unsigned(counter, 2));

end rtl;
